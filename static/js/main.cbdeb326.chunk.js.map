{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Components/robots.js","Components/Scroll.js","Components/Errorboundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","robots","map","user","i","key","username","Scroll","props","style","overflowY","border","height","children","Errorboundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKC,UAAU,OACf,2BAAOA,UAAU,mCACjBC,KAAK,SACLC,YAAY,kBACZC,SAAUJ,MCKGK,EAVJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACvB,OACC,yBAAKP,UAAU,uDACd,yBAAKQ,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,eACrB,4BAAKF,GACL,2BAAIC,KCgBQI,EArBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGhB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAClB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCfPK,EAAS,CACpB,CACEJ,GAAI,EACJF,KAAM,YACNW,SAAU,OACVV,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,oBACNW,SAAU,SACVV,MAAO,iCAET,CACEC,GAAI,EACJF,KAAM,gBACNW,SAAU,QACVV,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,gBACNW,SAAU,SACVV,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,gBACNW,SAAU,UACVV,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,cACNW,SAAU,OACVV,MAAO,mBAET,CACEC,GAAI,EACJF,KAAM,eACNW,SAAU,UACVV,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,mBACNW,SAAU,QACVV,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,gBACNW,SAAU,SACVV,MAAO,6BAET,CACEC,GAAI,GACJF,KAAM,qBACNW,SAAU,aACVV,MAAO,0BCjDIW,EARD,SAACC,GACd,OACC,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,WCgBMC,E,kDAlBd,aACC,IAAD,8BACC,gBACKC,MAAM,CACVC,UAAU,GAHZ,E,8DAMkBC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACN,6DAEDG,KAAKX,MAAMK,a,GAfQQ,aCkDbC,G,wDA3Cd,aACC,IAAD,8BACC,gBAcDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAM,CACVd,OAAOA,EACPwB,YAAa,IAJf,E,qDAkBS,IAAD,OACDG,EAAeT,KAAKJ,MAAMd,OAAO4B,QAAO,SAAA5B,GAC7C,OAAOA,EAAON,KAAKmC,cAAcC,SAAS,EAAKhB,MAAMU,YAAYK,kBAElE,OAAgC,IAA7BX,KAAKJ,MAAMd,OAAO+B,OAEb,2CAIR,yBAAK1C,UAAU,MACf,wBAAIA,UAAU,MAAd,mBACA,kBAAC,EAAD,CAAWD,aAAc8B,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUtB,OAAQ2B,W,GAnCFP,c,MCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.cbdeb326.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype=\"search\"\r\n\t\tplaceholder=\"Search Monsters\"\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Card=({name,email,id})=>{\r\n\treturn (\r\n\t\t<div className=\"bg-light-green tc dib br3 pa2 ma2 bw2 grow shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?set=set2`}/>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList=({robots})=>{\r\n\t// if(true)                            // for intentionally creating error to check use of Error boundary\r\n\t// \tthrow error;\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i)=>{\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Aman Sahu',\n    username: 'aman',\n    email: 'sahuaman83@gmail.com'\n  },\n  {\n    id: 2,\n    name: 'Anjali Srivastava',\n    username: 'anjali',\n    email: 'srivastava.anjali98@gmail.com'\n  },\n  {\n    id: 3,\n    name: 'Vipin Kashyap',\n    username: 'vipin',\n    email: 'ronalvipin@gmail.com'\n  },\n  {\n    id: 4,\n    name: 'Garima Bansal',\n    username: 'garima',\n    email: 'rockonbansal@gmail.com'\n  },\n  {\n    id: 5,\n    name: 'Murtaza Zakir',\n    username: 'murtaza',\n    email: 'zakir.murtaza@gmail.com'\n  },\n  {\n    id: 6,\n    name: 'Hari Prasad',\n    username: 'hari',\n    email: 'harip@gmail.com'\n  },\n  {\n    id: 7,\n    name: 'Khusboo Jain',\n    username: 'khusboo',\n    email: 'syed.khusboo34@gmail.com'\n  },\n  {\n    id: 8,\n    name: 'Mayur Chourasiya',\n    username: 'mayur',\n    email: 'mayurchrs@gmail.com'\n  },\n  {\n    id: 9,\n    name: 'Poonam Nishad',\n    username: 'Poonam',\n    email: 'nishad.poonam78@gmail.com'\n  },\n  {\n    id: 10,\n    name: 'Aman Singh Chauhan',\n    username: 'aman singh',\n    email: 'singhaman99@gmail.com'\n  }\n  \n];\n","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:\"scroll\" ,border:\"3px solid black\" ,height:\"500px\"}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass Errorboundary extends Component{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>OOPS....something is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default Errorboundary;","import React,{Component} from 'react';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport CardList from '../Components/CardList';\r\nimport {robots} from '../Components/robots';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport Errorboundary from '../Components/Errorboundary.js';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:robots,\r\n\t\t\tsearchfield: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\t// componentDidMount()\r\n\t// {\r\n\t// \tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t// \t.then(response=>response.json())\r\n\t// \t.then(users => this.setState({robots:users}));\r\n\t// }\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots=this.state.robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0)\r\n\t\t{\r\n\t\t\treturn <h1>Loading....</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t<div className=\"tc\">\r\n\t\t<h1 className=\"f1\">Monster Friends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<Errorboundary>\r\n\t\t<CardList robots={filteredRobots}/>\r\n\t\t</Errorboundary>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}